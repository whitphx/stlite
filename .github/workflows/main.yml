name: Test, Build, and Publish

on: [push]

jobs:
  changes:  # See https://github.com/dorny/paths-filter#examples
    runs-on: ubuntu-latest
    outputs:
      stlite-kernel: ${{ steps.filter.outputs.stlite-kernel }}
      tornado-e2e: ${{ steps.filter.outputs.tornado-e2e }}
      mountable: ${{ steps.filter.outputs.mountable }}
      sharing-common: ${{ steps.filter.outputs.sharing-common }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          stlite-kernel:
            - 'packages/stlite-kernel/**/*'
            # - '!packages/stlite-kernel/py/**/*'  # Not supported by paths-filter now: https://github.com/dorny/paths-filter/issues/106
          tornado-e2e:
            - 'packages/stlite-kernel/py/tornado'
            - 'packages/stlite-kernel/py/e2etests/**/*'
            - 'streamlit/**/*'
          mountable:
            - 'packages/mountable/**/*'
          sharing-common:
            - 'packages/sharing-common/**/*'

  test-stlite-kernel:
    needs: changes
    if: ${{ needs.changes.outputs.stlite-kernel == 'true' }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x]

    defaults:
      run:
        working-directory: packages/stlite-kernel

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    - run: yarn install --frozen-lockfile
    - name: Lint
      run: |
        yarn check:eslint
        yarn check:prettier
    - run: yarn test

  test-tornado-e2e:
    needs: changes
    if: ${{ needs.changes.outputs.tornado-e2e == 'true' }}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    # The following steps are based on https://github.com/python-poetry/poetry/blob/601dc7896c812d39b75f2358b17a9460561d3866/.github/workflows/main.yml#L51-L79
    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap poetry
      run: |
        curl -sL https://install.python-poetry.org | python - -y

    - name: Update PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure poetry
      run: poetry config virtualenvs.in-project false

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s pip --version || rm -rf .venv

    - name: Create virtualenv
      run: python -m venv .venv

    # Set up the /streamlit submodule
    ## Set up apt packages. Ref: https://github.com/streamlit/streamlit/wiki/Contributing#ubuntu
    - name: Install Streamlit build dependencies
      run: sudo apt install protobuf-compiler
    - name: Set up Streamlit and build proto
      run: |
        . .venv/bin/activate
        cd streamlit
        make mini-init

    - name: Install dependencies
      shell: bash
      run: poetry install
      working-directory: packages/stlite-kernel/py/e2etests

    - name: Run linter and code formatter to the test code module
      working-directory: packages/stlite-kernel/py/e2etests
      run: |
        poetry run black . --check
        poetry run isort . --check
        poetry run flake8

    - name: Run mypy
      working-directory: packages/stlite-kernel/py/e2etests
      run: poetry run mypy .

    - name: Run pytest
      shell: bash
      run: poetry run python -m pytest -v tests
      working-directory: packages/stlite-kernel/py/e2etests

  test-mountable:
    needs: changes
    if: ${{ needs.changes.outputs.mountable == 'true' }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    defaults:
      run:
        working-directory: packages/mountable

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    - run: yarn install --frozen-lockfile
    - name: Lint
      run: |
        yarn check:eslint
        yarn check:prettier
    - run: yarn test

  test-sharing-common:
    needs: changes
    if: ${{ needs.changes.outputs.sharing-common == 'true' }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    defaults:
      run:
        working-directory: packages/sharing-common

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
    - run: yarn install --frozen-lockfile
    - name: Lint
      run: |
        yarn check:eslint
        yarn check:prettier
    - run: yarn test

  build-mountable:
    if: ${{ ! failure() }}  # This job should run even if the depending jobs are skipped, but not when those jobs failed: https://qiita.com/abetomo/items/d9ede7dbeeb24f723fc5#%E8%A8%AD%E5%AE%9A%E4%BE%8B4
    needs: [test-stlite-kernel, test-tornado-e2e, test-mountable]

    env:
      python-version: "3.10.2"
      node-version: "16.x"
      # To avoid an error like "FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory".
      # See https://github.com/actions/virtual-environments/issues/70#issuecomment-653886422
      # The Linux VM has 7GB RAM (https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources),
      # so we set the max memory size as 6.5 GiB like https://nodejs.org/api/cli.html#--max-old-space-sizesize-in-megabytes
      NODE_OPTIONS: "--max-old-space-size=6656"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    ## Set up Python and Poetry environment
    - name: Set up Python ${{ env.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.python-version }}

    # Ref: https://github.com/python-poetry/poetry/blob/f51a2c7427a046bcb71434e8ff29f6ce137301f7/.github/workflows/main.yml#L51-L79
    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap poetry
      run: |
        curl -sL https://install.python-poetry.org | python - -y

    - name: Update PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure poetry
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s pip --version || rm -rf .venv

    ## Set up Node environment
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.node-version }}
        cache: 'yarn'
        registry-url: 'https://registry.npmjs.org'
        scope: '@stlite'

    ## Set up apt packages. Ref: https://github.com/streamlit/streamlit/wiki/Contributing#ubuntu
    - name: Install Streamlit build dependencies
      run: sudo apt install protobuf-compiler

    - name: Set up
      run: make init

    ## Build and deploy @stlite/mountable
    # PUBLIC_URL here is set as a relative path, which is possible to the trick introduced at https://github.com/whitphx/stlite/pull/143.
    - name: Set PUBLIC_URL
      run: echo "PUBLIC_URL=." >> $GITHUB_ENV
    - name: Build @stlite/mountable
      run: make mountable

    - name: Package
      working-directory: packages/mountable
      run: yarn pack

    - name: Upload the built tar ball as an artifact
      uses: actions/upload-artifact@v2
      if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
      with:
        path: packages/mountable/stlite-mountable-v*.tgz
        name: stlite-mountable-${{ github.sha }}.tgz

    - name: Upload the built tar ball as an artifact (when pushed with a version tag)
      uses: actions/upload-artifact@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        path: packages/mountable/stlite-mountable-v*.tgz
        name: stlite-mountable-${{ github.ref_name }}.tgz

  publish-mountable:
    if: ${{ !failure() && startsWith(github.ref, 'refs/tags/v') }}  # `!failure()` is necessary to avoid skipping this job after successful build: https://github.com/actions/runner/issues/491
    needs: [build-mountable]

    permissions:
      contents: write  # Necessary for creating releases: https://github.com/softprops/action-gh-release#permissions

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'yarn'
        registry-url: 'https://registry.npmjs.org'
        scope: '@stlite'

    - uses: actions/download-artifact@v3
      id: download-mountable
      with:
        name: stlite-mountable-${{ github.ref_name }}.tgz
        path: packages/mountable

    - run: yarn publish stlite-mountable-v*.tgz --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      working-directory: packages/mountable

    - name: Create a new release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: packages/mountable/stlite-mountable-v*.tgz

  build-sharing:
    if: ${{ ! failure() }}  # This job should run even if the depending jobs are skipped, but not when those jobs failed: https://qiita.com/abetomo/items/d9ede7dbeeb24f723fc5#%E8%A8%AD%E5%AE%9A%E4%BE%8B4
    needs: [test-stlite-kernel, test-tornado-e2e, test-sharing-common]

    env:
      python-version: "3.10.2"
      node-version: "16.x"
      # To avoid an error like "FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory".
      # See https://github.com/actions/virtual-environments/issues/70#issuecomment-653886422
      # The Linux VM has 7GB RAM (https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources),
      # so we set the max memory size as 6.5 GiB like https://nodejs.org/api/cli.html#--max-old-space-sizesize-in-megabytes
      NODE_OPTIONS: "--max-old-space-size=6656"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    ## Set up Python and Poetry environment
    - name: Set up Python ${{ env.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.python-version }}

    # Ref: https://github.com/python-poetry/poetry/blob/f51a2c7427a046bcb71434e8ff29f6ce137301f7/.github/workflows/main.yml#L51-L79
    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap poetry
      run: |
        curl -sL https://install.python-poetry.org | python - -y

    - name: Update PATH
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure poetry
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s pip --version || rm -rf .venv

    ## Set up Node environment
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.node-version }}
        cache: 'yarn'
        registry-url: 'https://registry.npmjs.org'
        scope: '@stlite'

    ## Set up apt packages. Ref: https://github.com/streamlit/streamlit/wiki/Contributing#ubuntu
    - name: Install Streamlit build dependencies
      run: sudo apt install protobuf-compiler

    - name: Set up
      run: make init

    ## Build and upload @stlite/sharing
    - name: Set EDITOR_APP_ORIGIN (preview)
      if: github.ref_name != github.event.repository.default_branch
      run: echo "REACT_APP_EDITOR_APP_ORIGIN_REGEX=^https://[a-z0-9]+\.stlite-sharing-editor\.pages\.dev$" >> $GITHUB_ENV
    - name: Set EDITOR_APP_ORIGIN (main branch)
      if: github.ref_name == github.event.repository.default_branch
      run: echo "REACT_APP_EDITOR_APP_ORIGIN=https://edit.share.stlite.net" >> $GITHUB_ENV
    - name: Build @stlite/sharing
      run: make sharing

    - name: Upload the built directory as an artifact
      uses: actions/upload-artifact@v2
      with:
        path: packages/sharing/build
        name: stlite-sharing

  deploy-sharing:
    if: ${{ ! failure() }}  # This job should run even if the depending jobs are skipped, but not when those jobs failed: https://qiita.com/abetomo/items/d9ede7dbeeb24f723fc5#%E8%A8%AD%E5%AE%9A%E4%BE%8B4
    needs: [build-sharing]

    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    name: Deploy @stlite/sharing to Cloudflare Pages
    outputs:
      url: ${{ steps.publish.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: stlite-sharing
          path: website
      - name: Publish
        uses: cloudflare/pages-action@1
        id: publish
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: stlite-sharing
          directory: website
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  build-sharing-editor:
    if: ${{ ! failure() }}  # This job should run even if the depending jobs are skipped, but not when those jobs failed: https://qiita.com/abetomo/items/d9ede7dbeeb24f723fc5#%E8%A8%AD%E5%AE%9A%E4%BE%8B4
    needs: [test-stlite-kernel, test-tornado-e2e, test-sharing-common, deploy-sharing]

    runs-on: ubuntu-latest

    env:
      node-version: "16.x"
      # To avoid an error like "FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory".
      # See https://github.com/actions/virtual-environments/issues/70#issuecomment-653886422
      # The Linux VM has 7GB RAM (https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources),
      # so we set the max memory size as 6.5 GiB like https://nodejs.org/api/cli.html#--max-old-space-sizesize-in-megabytes
      NODE_OPTIONS: "--max-old-space-size=6656"

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.node-version }}
        cache: 'yarn'
    - run: yarn install --frozen-lockfile
    - name: Set SHARING_APP_URL (preview)
      if: github.ref_name != github.event.repository.default_branch
      run: echo "REACT_APP_SHARING_APP_URL=${{needs.deploy-sharing.outputs.url}}" >> $GITHUB_ENV
    - name: Set SHARING_APP_URL (main branch)
      if: github.ref_name == github.event.repository.default_branch
      run: echo "REACT_APP_SHARING_APP_URL=https://share.stlite.net/" >> $GITHUB_ENV
    - run: make sharing-editor
    - name: Upload the built directory as an artifact
      uses: actions/upload-artifact@v2
      with:
        path: packages/sharing-editor/build
        name: stlite-sharing-editor

  deploy-sharing-editor:
    if: ${{ ! failure() }}  # This job should run even if the depending jobs are skipped, but not when those jobs failed: https://qiita.com/abetomo/items/d9ede7dbeeb24f723fc5#%E8%A8%AD%E5%AE%9A%E4%BE%8B4
    needs: [build-sharing-editor]

    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    name: Deploy @stlite/sharing-editor to Cloudflare Pages
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: stlite-sharing-editor
          path: website
      - name: Publish
        uses: cloudflare/pages-action@1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: stlite-sharing-editor
          directory: website
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
