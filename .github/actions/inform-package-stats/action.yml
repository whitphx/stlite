inputs:
  key:
    required: true
  name:
    required: true
  input-path:
    required: true
  stats-file-prefix:
    default: "package-stats."

runs:
  using: "composite"
  steps:
    - name: Set up the working directory
      shell: bash
      run: |
        working_dir=$RUNNER_TEMP/stats-workspace/${{ inputs.key }}
        mkdir -p $working_dir
        echo "PACKAGE_STATS_WORKING_DIR=$working_dir" >> "$GITHUB_ENV"

    - name: Stage the files
      id: stage-files
      shell: bash
      run: |
        if [[ -f "${{ inputs.input-path }}" ]]; then
          filename=$(basename "${{ inputs.input-path }}")
          package_workdir="$PACKAGE_STATS_WORKING_DIR/package"
          package_path="$package_workdir/$filename"
          files_workdir="$PACKAGE_STATS_WORKING_DIR/files"

          mkdir -p $package_workdir $files_workdir

          cp "${{ inputs.input-path }}" $package_path
          if [[ $package_path == *.tgz ]]; then
            tar -xzf "$package_path" -C $files_workdir
          else
            pushd $files_workdir
            unzip "$package_path"
            popd
          fi

          echo "PACKAGE_FILENAME=$package_path" >> $GITHUB_OUTPUT
          echo "FILES_DIR_PATH=$files_workdir" >> $GITHUB_OUTPUT
        elif [[ -d "${{ inputs.input-path }}" ]]; then
          dir_name=$(basename "${{ inputs.input-path }}")
          files_workdir="$PACKAGE_STATS_WORKING_DIR/files"
          package_workdir="$PACKAGE_STATS_WORKING_DIR/package"

          mkdir -p $files_workdir $package_workdir

          cp -r "${{ inputs.input-path }}" $files_workdir
          package_path="$package_workdir/$dir_name.tar"
          tar -cf "$package_path" -C $files_workdir .

          echo "PACKAGE_FILENAME=$package_path" >> $GITHUB_OUTPUT
          echo "FILES_DIR_PATH=$files_workdir" >> $GITHUB_OUTPUT
        fi
    - name: Check the input and the staged files validity
      shell: bash
      if: ${{ steps.stage-files.outputs.PACKAGE_FILENAME == '' || steps.stage-files.outputs.FILES_DIR_PATH == '' }}
      run: |
        echo "The input was not properly staged in the previous step."
        exit 1

    - name: Create the stats JSON
      id: create-stats-json
      shell: bash
      run: |
        export NAME="${{ inputs.name }}"
        export PACKAGE_FILENAME=$(basename "${{ steps.stage-files.outputs.PACKAGE_FILENAME }}")
        export PACKAGE_SIZE_KIB=$(du -k "${{ steps.stage-files.outputs.PACKAGE_FILENAME }}" | cut -f1)

        pushd "${{ steps.stage-files.outputs.FILES_DIR_PATH }}"
        export FILELIST_TREE=$(tree .)
        export FILELIST_SIZES=$(find . -type f -printf "%10s %p\n" | sort -k 2)
        popd

        output_filename="${{ inputs.stats-file-prefix }}${{ inputs.key }}.json"
        output_filepath="$PACKAGE_STATS_WORKING_DIR/$output_filename"

        jq -n \
          '{
            "name": env.NAME,
            "package": {
              "filename": env.PACKAGE_FILENAME,
              "sizeKib": env.PACKAGE_SIZE_KIB | tonumber
            },
            "filelist": {
              "tree": env.FILELIST_TREE,
              "sizes": env.FILELIST_SIZES
            }
          }' > $output_filepath

        echo "OUTPUT_FILEPATH=$output_filepath" >> "$GITHUB_OUTPUT"
        echo "OUTPUT_FILENAME=$output_filename" >> "$GITHUB_OUTPUT"

    - name: Preview the JSON
      shell: bash
      run: |
        echo "::group::Stats JSON preview"
        cat ${{ steps.create-stats-json.outputs.OUTPUT_FILEPATH }}
        echo "::endgroup::"

    - name: Upload the JSON file as an artifact
      uses: actions/upload-artifact@v4
      if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
      with:
        path: ${{ steps.create-stats-json.outputs.OUTPUT_FILEPATH }}
        name: ${{ steps.create-stats-json.outputs.OUTPUT_FILENAME }}

    - name: Get the base run_id for diff
      run: |
        diff_base_branch='${{ github.event.repository.default_branch }}'
        current_workflow='${{ github.workflow }}'
        run_info=$(gh run list --branch "$diff_base_branch" --workflow "$current_workflow" --status success --limit 1 --json=databaseId,headSha --jq ".[0]")
        run_id=$(echo $run_info | jq -r ".databaseId")
        commit_sha=$(echo $run_info | jq -r ".headSha")
        echo "PACKAGE_STATS_DIFF_BASE_RUN_ID=$run_id" >> $GITHUB_ENV
        echo "PACKAGE_STATS_DIFF_BASE_COMMIT_SHA=$commit_sha" >> $GITHUB_ENV
        echo "PACKAGE_STATS_DIFF_BASE_BRANCH=$diff_base_branch" >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ github.token }}
      shell: bash

    - run: |
        cd "$PACKAGE_STATS_WORKING_DIR"
        npm install jszip
      shell: bash
    - name: Gather JSON files for this commit and generate a comment body
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          process.chdir(process.env.PACKAGE_STATS_WORKING_DIR);

          const fs = require("fs");
          const jszip = require('jszip');
          const { spawn } = require('child_process');

          function escapeRegex(string) {
            // https://stackoverflow.com/a/3561711/13103190
            return string.replace(/[/\-\\^$*+?.()|[\]{}]/g, '\\$&');
          }

          async function loadStatArtifactContents(runId) {
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });

            const filteredArtifacts = artifacts.data.artifacts
              .map(artifact => {
                const match = artifact.name.match(new RegExp(`^(?<prefix>${escapeRegex("${{ inputs.stats-file-prefix }}")})(?<key>.+)\.json`));
                if (match == null) {
                  return null;
                }
                return { key: match.groups["key"], artifact };
              })
              .filter(a => a != null);

            const artifactContents = await Promise.all(
              filteredArtifacts.map(async ({ key, artifact }) => {
                const downloadResponse = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                  archive_format: 'zip',
                });

                const artifactZip = await downloadResponse.data;
                const zip = await jszip.loadAsync(artifactZip);
                const artifactFile = Object.values(zip.files)[0];
                const artifactContent = await artifactFile.async('string');

                return { key, content: JSON.parse(artifactContent) };
              })
            );

            return artifactContents;
          }

          const artifactContents = await loadStatArtifactContents(context.runId)
          core.startGroup('Artifact contents preview')
          console.log(JSON.stringify(artifactContents, null, 2));
          core.endGroup()

          const baseArtifactContents = await loadStatArtifactContents(process.env.PACKAGE_STATS_DIFF_BASE_RUN_ID)
          core.startGroup('Base artifact contents preview')
          console.log(JSON.stringify(baseArtifactContents, null, 2));
          core.endGroup()

          const sortedContents = artifactContents.sort((a, b) => a.content.name.localeCompare(b.content.name));

          function compareStrings(str1, str2) {
            fs.writeFileSync('temp1.txt', str1);
            fs.writeFileSync('temp2.txt', str2);

            const diff = spawn(
              'diff',
              [
                // Ref: https://stackoverflow.com/a/354590/13103190
                '--new-line-format', '+%L',
                '--old-line-format', '-%L',
                '--unchanged-line-format', ' %L',
                'temp1.txt',
                'temp2.txt'
              ]
            );

            let output = '';
            diff.stdout.on('data', (data) => {
              output += data.toString();
            });

            return new Promise((resolve, reject) => {
              diff.on('close', (code) => {
                fs.unlinkSync('temp1.txt');
                fs.unlinkSync('temp2.txt');

                resolve({ isDiff: code === 0, diff: output });
              });
            });
          }

          let comment = "";
          comment +=
            `Diffs are from [\`${process.env.PACKAGE_STATS_DIFF_BASE_COMMIT_SHA.slice(0, 7)}\`](https://github.com/${{ github.repository }}/commit/${process.env.PACKAGE_STATS_DIFF_BASE_COMMIT_SHA}) ` +
            `on [\`${process.env.PACKAGE_STATS_DIFF_BASE_BRANCH}\`](https://github.com/whitphx/stlite/tree/${process.env.PACKAGE_STATS_DIFF_BASE_BRANCH})  ` +
            `(workflow run: [\`${process.env.PACKAGE_STATS_DIFF_BASE_RUN_ID}\`](https://github.com/${{ github.repository }}/actions/runs/${process.env.PACKAGE_STATS_DIFF_BASE_RUN_ID}))\n\n`;

          for (const artifactContent of sortedContents) {
            const { key, content } = artifactContent;

            const baseContent = baseArtifactContents.find(b => b.key === key)?.content;

            const sizeKiB = content.package.sizeKib;
            const baseSizeKiB = baseContent?.package?.sizeKib;
            const sizeDiffFormatter = new Intl.NumberFormat("en-US", { signDisplay: "always" });
            const sizeDiffStr = baseSizeKiB ? `(${baseSizeKiB} kiB **${sizeDiffFormatter.format(sizeKiB - baseSizeKiB)} kiB**)` : "";

            const fileSizesCmp = await compareStrings(baseContent?.filelist?.sizes ?? "", content.filelist.sizes)

            comment += `### ${content.name}
          \`${content.package.filename}\`: ${sizeKiB} kiB ${sizeDiffStr}

          <details>
          <summary>File Tree</summary>

          \`\`\`\n${content.filelist.tree}\n\`\`\`

          </details>

          <details>
          <summary>File Sizes</summary>

          \`\`\`diff\n${fileSizesCmp.diff}\n\`\`\`

          </details>

          `;
          }
          core.startGroup('Comment preview')
          core.info(comment);
          core.endGroup()

          fs.writeFileSync('comment.txt', comment);

    - name: Post a message to Pull Request threads
      uses: actions/github-script@v7
      with:
        script: |
          process.chdir(process.env.PACKAGE_STATS_WORKING_DIR);

          const fs = require("fs");

          const commentBody = fs.readFileSync('comment.txt');

          const pullRequests = (
            await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            })
          ).data;
          const openPullRequests = pullRequests.filter(pr => pr.state === "open")

          core.startGroup('Found PRs:')
          console.log(openPullRequests)
          core.endGroup()

          const stickyCommentHeader = `<!-- Sticky Stat Comment ${context.sha} -->\n`;

          for (const pr of openPullRequests) {
            const title = `## Package Stats on [\`${context.sha.slice(0, 7)}\`](${pr.html_url}/commits/${context.sha})\n\n`;
            const commentText = title + commentBody;

            const stickyCommentText = stickyCommentHeader + commentText

            const existingComments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
              }
            );

            const existingComment = existingComments.find(comment =>
              comment.body.startsWith(stickyCommentHeader) && comment.user.login === 'github-actions[bot]'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: stickyCommentText,
              });
              core.info(`Updated comment on PR #${pr.number}`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: stickyCommentText,
              });
              core.info(`Created comment on PR #${pr.number}`);
            }
          }
