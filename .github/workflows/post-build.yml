name: Post-build

on:
  workflow_run:
    workflows: ["Test, Build, and Publish"]
    types:
      - completed

env:
  python-version-file: ".python-version"
  node-version-file: ".nvmrc"

permissions: {}

jobs:
  get-build-info:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      branch: ${{ steps.build-info.outputs.branch }}
      commit-hash: ${{ steps.build-info.outputs.commit-hash }}
      pr-number: ${{ steps.build-info.outputs.pr-number }}
    steps:
      - name: Download build info
        uses: actions/download-artifact@v4
        with:
          name: build-info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Read build info
        id: build-info
        run: |
          echo "branch=$(cat branch)" >> $GITHUB_OUTPUT
          echo "commit-hash=$(cat commit-hash)" >> $GITHUB_OUTPUT
          echo "pr-number=$(cat pr-number)" >> $GITHUB_OUTPUT

  publish-browser:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    permissions:
      contents: write  # Necessary for creating releases: https://github.com/softprops/action-gh-release#permissions

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: ${{ env.node-version-file }}
        cache: 'yarn'
        registry-url: 'https://registry.npmjs.org'
        scope: '@stlite'

    - uses: actions/download-artifact@v4
      with:
        name: stlite-browser-${{ github.ref_name }}.tgz
        path: packages/browser
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - run: yarn publish stlite-browser-v*.tgz --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      working-directory: packages/browser

    - name: Create a new release
      uses: softprops/action-gh-release@v2
      with:
        files: packages/browser/stlite-browser-v*.tgz
        generate_release_notes: true

  e2e-desktop:
    needs: get-build-info
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    permissions:
      contents: read
      checks: write

    runs-on: ${{ matrix.os }}

    steps:
    - uses: LouisBrunner/checks-action@v2.0.0
      id: create-check-run
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: ${{ github.job }}
        status: "in_progress"
        sha: ${{ needs.get-build-info.outputs.commit-hash }}
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: ${{ env.node-version-file }}

    - run: cp -r packages/desktop/samples/basic ${{ runner.temp }}/sample_app

    - name: Download artifact into the temp dir
      uses: actions/download-artifact@v4
      if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
      with:
        name: stlite-desktop-${{ needs.get-build-info.outputs.commit-hash }}.tgz
        path: ${{ runner.temp }}/sample_app
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Download artifact into the temp dir
      uses: actions/download-artifact@v4
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        name: stlite-desktop-${{ github.ref_name }}.tgz
        path: ${{ runner.temp }}/sample_app
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install the tarball
      run: |
        mv stlite-desktop-v*.tgz stlite-desktop.tgz
        npm install file:stlite-desktop.tgz
      working-directory: ${{ runner.temp }}/sample_app

    - run: yarn dump
      working-directory: ${{ runner.temp }}/sample_app

    # TODO: Run `yarn serve` and check if the app doesn't show any error.

    - name: Check if electron-builder works
      run: yarn run app:dir
      working-directory: ${{ runner.temp }}/sample_app

    - uses: LouisBrunner/checks-action@v2.0.0
      if: always()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        check_id: ${{ steps.create-check-run.outputs.check_id }}
        conclusion: ${{ job.status }}
        status: "completed"

  publish-desktop:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: [e2e-desktop]

    permissions:
      contents: write  # Necessary for creating releases: https://github.com/softprops/action-gh-release#permissions

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: ${{ env.node-version-file }}
        cache: 'yarn'
        registry-url: 'https://registry.npmjs.org'
        scope: '@stlite'

    - uses: actions/download-artifact@v4
      with:
        name: stlite-desktop-${{ github.ref_name }}.tgz
        path: packages/desktop
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - run: yarn publish stlite-desktop-v*.tgz --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      working-directory: packages/desktop

    - name: Create a new release
      uses: softprops/action-gh-release@v2
      with:
        files: packages/desktop/stlite-desktop-v*.tgz
        generate_release_notes: true

  publish-vscode-extension:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs:
    - publish-browser  # The VSC extension uses the same version of published @stlite/browser, so it must be released in order.

    permissions:
      contents: write  # Necessary for creating releases: https://github.com/softprops/action-gh-release#permissions

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target: [marketplace, openvsx]

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: vscode-stlite-${{ github.ref_name }}.vsix
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - run: |
        files=( vscode-stlite*.vsix )
        echo "vsix_filename=${files[0]}" >> $GITHUB_ENV
    - if: matrix.target == 'marketplace'
      name: Publish to Visual Studio Marketplace
      uses: HaaLeo/publish-vscode-extension@v2
      with:
        extensionFile: "${{ env.vsix_filename }}"
        pat: ${{ secrets.VSCE_PAT }}
        registryUrl: https://marketplace.visualstudio.com
    - if: matrix.target == 'openvsx'
      name: Publish to Open VSX Registry
      uses: HaaLeo/publish-vscode-extension@v2
      with:
        extensionFile: "${{ env.vsix_filename }}"
        pat: ${{ secrets.OPEN_VSX_TOKEN }}
    - if: matrix.target == 'marketplace'
      name: Create a new release
      uses: softprops/action-gh-release@v2
      with:
        files: "${{ env.vsix_filename }}"
        generate_release_notes: true
