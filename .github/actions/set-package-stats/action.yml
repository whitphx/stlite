inputs:
  key:
    required: true
  name:
    required: true
  input-path:
    required: true
  stats-file-prefix:
    default: "package-stats."
  size-diff-warning-threshold-kib:
    default: 128

runs:
  using: "composite"
  steps:
    - name: Set up the working directory
      shell: bash
      run: |
        working_dir=${{ runner.temp }}/stats-workspace/${{ inputs.key }}
        mkdir -p $working_dir
        echo "PACKAGE_STATS_WORKING_DIR=$working_dir" >> "$GITHUB_ENV"

    - name: Stage the files
      id: stage-files
      shell: bash
      run: |
        if [[ -f "${{ inputs.input-path }}" ]]; then
          filename=$(basename "${{ inputs.input-path }}")
          package_workdir="$PACKAGE_STATS_WORKING_DIR/package"
          package_path="$package_workdir/$filename"
          files_workdir="$PACKAGE_STATS_WORKING_DIR/files"

          mkdir -p $package_workdir $files_workdir

          cp "${{ inputs.input-path }}" $package_path
          if [[ $package_path == *.tgz ]]; then
            tar -xzf "$package_path" -C $files_workdir
          else
            pushd $files_workdir
            unzip "$package_path"
            popd
          fi

          echo "PACKAGE_FILENAME=$package_path" >> $GITHUB_OUTPUT
          echo "FILES_DIR_PATH=$files_workdir" >> $GITHUB_OUTPUT
        elif [[ -d "${{ inputs.input-path }}" ]]; then
          dir_name=$(basename "${{ inputs.input-path }}")
          files_workdir="$PACKAGE_STATS_WORKING_DIR/files"
          package_workdir="$PACKAGE_STATS_WORKING_DIR/package"

          mkdir -p $files_workdir $package_workdir

          cp -r "${{ inputs.input-path }}" $files_workdir
          package_path="$package_workdir/$dir_name.tar"
          tar -cf "$package_path" -C $files_workdir .

          echo "PACKAGE_FILENAME=$package_path" >> $GITHUB_OUTPUT
          echo "FILES_DIR_PATH=$files_workdir" >> $GITHUB_OUTPUT
        fi
    - name: Check the input and the staged files validity
      shell: bash
      if: ${{ steps.stage-files.outputs.PACKAGE_FILENAME == '' || steps.stage-files.outputs.FILES_DIR_PATH == '' }}
      run: |
        echo "The input was not properly staged in the previous step."
        exit 1

    - name: Create the stats JSON
      id: create-stats-json
      shell: bash
      run: |
        export NAME="${{ inputs.name }}"
        export PACKAGE_FILENAME=$(basename "${{ steps.stage-files.outputs.PACKAGE_FILENAME }}")
        export PACKAGE_SIZE_KIB=$(du -k "${{ steps.stage-files.outputs.PACKAGE_FILENAME }}" | cut -f1)

        pushd "${{ steps.stage-files.outputs.FILES_DIR_PATH }}"
        export FILELIST_TREE=$(tree .)
        export FILELIST_SIZES=$(find . -type f -printf "%10s %p\n" | sort -k 2)
        popd

        output_filename="${{ inputs.stats-file-prefix }}${{ inputs.key }}.json"
        output_filepath="$PACKAGE_STATS_WORKING_DIR/$output_filename"

        jq -n \
          '{
            "name": env.NAME,
            "package": {
              "filename": env.PACKAGE_FILENAME,
              "sizeKib": env.PACKAGE_SIZE_KIB | tonumber
            },
            "filelist": {
              "tree": env.FILELIST_TREE,
              "sizes": env.FILELIST_SIZES
            }
          }' > $output_filepath

        echo "OUTPUT_FILEPATH=$output_filepath" >> "$GITHUB_OUTPUT"
        echo "OUTPUT_FILENAME=$output_filename" >> "$GITHUB_OUTPUT"

    - name: Preview the JSON
      shell: bash
      run: |
        echo "::group::Stats JSON preview"
        cat ${{ steps.create-stats-json.outputs.OUTPUT_FILEPATH }}
        echo "::endgroup::"

    - name: Upload the JSON file as an artifact
      uses: actions/upload-artifact@v4
      if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
      with:
        path: ${{ steps.create-stats-json.outputs.OUTPUT_FILEPATH }}
        name: ${{ steps.create-stats-json.outputs.OUTPUT_FILENAME }}

    - uses: ./.github/actions/inform-package-stats
      with:
        stats-file-prefix: ${{ inputs.stats-file-prefix }}
        size-diff-warning-threshold-kib: ${{ inputs.size-diff-warning-threshold-kib }}
