inputs:
  key:
    required: true
  name:
    required: true
  input-path:
    required: true

runs:
  using: "composite"
  steps:
    - name: Stage the files
      id: stage-files
      shell: bash
      run: |
        if [[ "${{ inputs.input-path }}" == *.tgz || "${{ inputs.input-path }}" == *.whl ]]; then
          filename=$(basename "${{ inputs.input-path }}")
          package_dir="$RUNNER_TEMP/package"
          package_path="$package_dir/$filename"
          files_dir="$RUNNER_TEMP/files"
          mkdir -p $package_dir $files_dir
          cp "${{ inputs.input-path }}" $package_dir

          if [[ $package_path == *.tgz ]]; then
            tar -xzf "$package_path" -C $files_dir
          else
            pushd $files_dir
            unzip "$package_path"
            popd
          fi

          echo "PACKAGE_FILENAME=$package_path" >> $GITHUB_OUTPUT
          echo "FILES_DIR_PATH=$files_dir" >> $GITHUB_OUTPUT
        elif [[ -d "${{ inputs.input-path }}" ]]; then
          dir_name=$(basename "${{ inputs.input-path }}")
          files_dir="$RUNNER_TEMP/files"
          package_dir="$RUNNER_TEMP/package"
          mkdir -p $files_dir $package_dir
          cp -r "${{ inputs.input-path }}" $files_dir
          package_path="$package_dir/$dir_name.tgz"
          tar -czf "$package_path" -C $files_dir .

          echo "PACKAGE_FILENAME=$package_path" >> $GITHUB_OUTPUT
          echo "FILES_DIR_PATH=$files_dir" >> $GITHUB_OUTPUT
        fi
    - name: Check input validity
      shell: bash
      if: ${{ steps.stage-files.outputs.PACKAGE_FILENAME == '' || steps.stage-files.outputs.FILES_DIR_PATH == '' }}
      run: |
        echo "The input was not properly staged in the previous step."
        exit 1

    - name: Create the stats JSON
      id: create-stats-json
      shell: bash
      run: |
        export NAME="${{ inputs.name }}"
        export PACKAGE_FILENAME=$(basename "${{ steps.stage-files.outputs.PACKAGE_FILENAME }}")
        export PACKAGE_SIZE_KIB=$(du -k "${{ steps.stage-files.outputs.PACKAGE_FILENAME }}" | cut -f1)
        export FILELIST_TREE=$(tree "${{ steps.stage-files.outputs.FILES_DIR_PATH }}")
        export FILELIST_SIZES=$(find "${{ steps.stage-files.outputs.FILES_DIR_PATH }}" -type f -printf "%10s %p\n")

        output_filename="npm-package-stats.${{ inputs.key }}.json"
        output_filepath="$RUNNER_TEMP/$output_filename"

        jq -n \
          '{
            "name": env.NAME,
            "package": {
              "filename": env.PACKAGE_FILENAME,
              "sizeKib": env.PACKAGE_SIZE_KIB | tonumber
            },
            "filelist": {
              "tree": env.FILELIST_TREE,
              "sizes": env.FILELIST_SIZES
            }
          }' > $output_filepath

        echo "OUTPUT_FILEPATH=$output_filepath" >> "$GITHUB_OUTPUT"
        echo "OUTPUT_FILENAME=$output_filename" >> "$GITHUB_OUTPUT"

    - name: Preview the JSON
      shell: bash
      run: cat ${{ steps.create-stats-json.outputs.OUTPUT_FILEPATH }}

    - name: Upload the JSON file as an artifact
      uses: actions/upload-artifact@v4
      if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
      with:
        path: ${{ steps.create-stats-json.outputs.OUTPUT_FILEPATH }}
        name: ${{ steps.create-stats-json.outputs.OUTPUT_FILENAME }}

    - run: |
        cd "$RUNNER_TEMP"
        npm install jszip
      shell: bash
    - name: Gather JSON files for this commit and generate a comment content
      id: gen-comment
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          process.chdir(process.env.RUNNER_TEMP)

          const jszip = require('jszip');

          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          const filteredArtifacts = artifacts.data.artifacts.filter(artifact =>
            artifact.name.match(/^npm-package-stats\..+\.json$/)
          );

          const artifactContents = await Promise.all(
            filteredArtifacts.map(async (artifact) => {
              const downloadResponse = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });

              const artifactZip = await downloadResponse.data;
              const zip = await jszip.loadAsync(artifactZip);
              const artifactFile = Object.values(zip.files)[0];
              const artifactContent = await artifactFile.async('string');

              return JSON.parse(artifactContent);
            })
          );

          const sortedStats = artifactContents.sort((a, b) => a.name.localeCompare(b.name));

          console.log('Artifact contents:');
          console.log(JSON.stringify(sortedStats, null, 2));

          let comment = "";
          for (const stat of sortedStats) {
            comment += `### ${stat.name}
          \`${stat.package.filename}\` (${stat.package.sizeKib} kiB)

          <details>
          <summary>File Tree</summary>

          \`\`\`\n${stat.filelist.tree}\n\`\`\`

          #### Sizes
          \`\`\`\n${stat.filelist.sizes}\n\`\`\`

          </details>

          <details>
          <summary>File Sizes</summary>

          \`\`\`\n${stat.filelist.sizes}\n\`\`\`

          </details>

          `;
          }

          console.log(comment);

          return comment

    - name: Post a message to Pull Request threads
      env:
        COMMENT_CONTENT: ${{ steps.gen-comment.outputs.result }}
      uses: actions/github-script@v6
      with:
        script: |
          process.chdir(process.env.RUNNER_TEMP)

          const pullRequests = await github.rest.repos.listPullRequestsAssociatedWithCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
          });

          console.log("Found PRs:")
          console.log(pullRequests.data)

          const stickyCommentHeader = `<!-- Sticky Stat Comment ${context.sha} -->\n`;

          for (const pr of pullRequests.data) {
            const title = `## Package Stats on [\`${context.sha.slice(0, 7)}\`](${pr.html_url}/commits/${context.sha})\n\n`;
            const commentText = title + process.env.COMMENT_CONTENT;

            const stickyCommentText = stickyCommentHeader + commentText

            const existingComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
            });

            const existingComment = existingComments.data.find(comment =>
              comment.body.startsWith(stickyCommentHeader) && comment.user.login === 'github-actions[bot]'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: stickyCommentText,
              });
              console.log(`Updated comment on PR #${pr.number}`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: stickyCommentText,
              });
              console.log(`Created comment on PR #${pr.number}`);
            }
          }
