name: 'Initialization Action'
description: 'Common initialization steps for CI jobs'
inputs:
  python-version-file:
    description: 'Python version file to setup'
    required: false
  node-version-file:
    description: 'Node version file to setup'
    required: false
  install-node-modules:
    description: 'Whether to install Node.js modules using "make node_modules"'
    required: false
    default: 'true'
  protoc:
    description: 'Whether to install protoc'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    ## Set up Python
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
      with:
        enable-cache: true
        cache-dependency-glob: |
          **/requirements*.txt
          **/uv.lock
      if: ${{ inputs.python-version-file }}

    ## Set up Node environment
    - name: Remove classic Yarn on Windows so that it does not conflict with Corepack.
      if: runner.os == 'Windows' && ${{ inputs.node-version-file }}
      run: npm uninstall -g yarn
      shell: bash

    - name: Enable Corepack
      run: corepack enable
      shell: bash
    - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
      with:
        node-version-file: ${{ inputs.node-version-file }}
      if: ${{ inputs.node-version-file }}

    # `actions/setup-node`'s cache option doesn't work well with corepack.
    - name: Get Yarn cache directory path
      id: yarn-cache-path
      run: echo "path=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      shell: bash
      if: ${{ inputs.node-version-file }}
    - name: Cache Yarn global dependencies
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: ${{ steps.yarn-cache-path.outputs.path }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
      if: ${{ inputs.node-version-file }}

    # We require protoc >= 3.20, but Ubuntu 22.04 - the OS that these Github
    # Actions are running as of 2023.05.03 - doesn't have recent versions
    # of protoc in its package repository.
    # Ref: https://github.com/streamlit/streamlit/blob/1.23.1/.github/actions/make_init/action.yml#L47-L56
    # So we download the precompiled binary from the release page and install it,
    # following https://grpc.io/docs/protoc-installation/#install-pre-compiled-binaries-any-os
    - name: Install protoc
      run: |
        curl -LO $PB_REL/download/v3.20.3/protoc-3.20.3-linux-x86_64.zip
        unzip protoc-3.20.3-linux-x86_64.zip -d $HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      env:
        PB_REL: "https://github.com/protocolbuffers/protobuf/releases"
      shell: bash
      if: ${{ inputs.protoc == 'true' }}

    - name: Set up Python packages
      run: make venv
      shell: bash
      if: ${{ inputs.python-version-file }}

    - name: Set up Node packages
      run: make node_modules
      shell: bash
      if: ${{ inputs.node-version-file && inputs.install-node-modules == 'true' }}
